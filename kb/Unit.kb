#|  Unit class
SIunit slot needs to be set as float to make it able to be  converted to float, not X/Y, on division.
|#
(Unit has
;       (terms ("unit"))
       (ratio ((must-be-a Number))))
(HeightUnit has (superclasses (Unit)))
(WeightUnit has (superclasses (Unit)))
(VolumeUnit has (superclasses (Unit)))
(EnergyUnit has (superclasses (Unit)))

(every HeightUnit has
       (SIunit ((*Meter))))
(every WeightUnit has
       (SIunit ((*Gram))))
(every VolumeUnit has
       (SIunit ((*MilliLiter))))
(every EnergyUnit has
       (SIunit ((*KiloJoule))))

;; Height unit

(*Meter has
	(instance-of (HeightUnit))
	(ratio (1.0))
	(text ((:seq "m"))))
(*CentiMeter has
	    (instance-of (HeightUnit))
	    (ratio ((1.0 / 100)))
	    (text ((:seq "cm"))))
(*MilliMeter has
       (instance-of (HeightUnit))
       (ratio ((1.0 / 1000)))
       (text ((:seq "mm"))))
(*Feet has
       (instance-of (HeightUnit))
       (ratio (0.3048))
       (text ((:seq "ft"))))
(*Yard has
       (instance-of (HeightUnit))
       (ratio (((the ratio of *Feet) * 3)))
       (text ((:seq "yd"))))
(*Inch has
       (instance-of (HeightUnit))
       (ratio (((the ratio of *Feet) / 12)))
       (text ((:seq "in"))))

;; Weight unit

(*Gram has
      (instance-of (WeightUnit))
      (ratio (1.0))
      (text ((:seq "g"))))
(*KiloGram has
      (instance-of (WeightUnit))
      (ratio (1000.0))
      (text ((:seq "kg"))))
(*MilliGram has
      (instance-of (WeightUnit))
      (ratio ((1.0 / 1000)))
      (text ((:seq "mg"))))
(*MicroGram has
      (instance-of (WeightUnit))
      (ratio (((the ratio of *MilliGram) / 1000)))
      (text ((:seq "mcg"))))

;; Volume unit

(*MilliLiter has
	    (instance-of (VolumeUnit))
	    (ratio (1.0))
	    (text ((:seq "ml"))))
(*Liter has
	    (instance-of (VolumeUnit))
	    (ratio (1000.0))
	    (text ((:seq "L"))))
(*CubicMeter has
	    (instance-of (VolumeUnit))
	    (ratio (((the ratio of Liter) * 1000)))
	    (text ((:seq "m©ø"))))
(*CubicInch has
	    (instance-of (VolumeUnit))
	    (ratio (16.3871))
	    (text ((:seq "in©ø"))))
(*CubicFeet has
	    (instance-of (VolumeUnit))
	    (ratio (((the ratio of CubicInch) * 1728)))
	    (text ((:seq "ft©ø"))))
(*TeaSpoon has
	    (instance-of (VolumeUnit))
	    (ratio (4.92892))
	    (text ((:seq "tsp"))))
(*TableSpoon has
	    (instance-of (VolumeUnit))
	    (ratio (((the ratio of TeaSpoon) * 3)))
	    (text ((:seq "tbsp"))))
(*FluidOunce has
	    (instance-of (VolumeUnit))
	    (ratio ((the product of (:bag (the ratio of TableSpoon) 2))))
	    (text ((:seq "fl oz"))))
(*Cup has
	    (instance-of (VolumeUnit))
	    (ratio (236.588))
	    (text ((:seq "cup"))))
(*Pint has
	    (instance-of (VolumeUnit))
	    (ratio (473.176))
	    (text ((:seq "pint"))))
(*Quart has
	    (instance-of (VolumeUnit))
	    (ratio (((the ratio of Pint) * 2)))
	    (text ((:seq "quart"))))
(*Gallon has
	    (instance-of (VolumeUnit))
	    (ratio (((the ratio of Quart) * 4)))
	    (text ((:seq "gallon"))))

;; Energy unit

(*Joule has
	    (instance-of (EnergyUnit))
	    (ratio ((1.0 / 1000)))
	    (text ((:seq "J"))))
(*KiloJoule has
	    (instance-of (EnergyUnit))
	    (ratio (1.0))
	    (text ((:seq "kJ"))))
(*GramCalorie has
	    (instance-of (EnergyUnit))
	    (ratio (((the ratio of *KiloCalorie) / 1000)))
	    (text ((the text of *ThermochemicalCalorie))))
(*KiloCalorie has
	    (instance-of (EnergyUnit))
	    (ratio ((the ratio of *ThermochemicalCalorie)))
	    (text ((:seq "kcal"))))
(*ThermochemicalCalorie has
	    (instance-of (EnergyUnit))
	    (ratio (4.184))
	    (text ((:seq "calth"))))
(*4C-Calorie has
	    (instance-of (EnergyUnit))
	    (ratio (4.204))
	    (text ((:seq "cal4"))))
(*15C-Calorie has
	    (instance-of (EnergyUnit))
	    (ratio (4.1855))
	    (text ((:seq "cal15"))))
(*20C-Calorie has
	    (instance-of (EnergyUnit))
	    (ratio (4.182))
	    (text ((:seq "cal20"))))
(*MeanCalorie has
	    (instance-of (EnergyUnit))
	    (ratio (4.190))
	    (text ((:seq "cal"))))
(*SteamTableCalorie has
	    (instance-of (EnergyUnit))
	    (ratio (4.1868))
	    (text ((:seq "calit"))))